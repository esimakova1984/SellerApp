{"name": "Add product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=122.0.6261.112)\nStacktrace:\n0   chromedriver                        0x0000000107f9f2a8 chromedriver + 4625064\n1   chromedriver                        0x0000000107f96e53 chromedriver + 4591187\n2   chromedriver                        0x0000000107b95c97 chromedriver + 392343\n3   chromedriver                        0x0000000107bdb57f chromedriver + 677247\n4   chromedriver                        0x0000000107bda161 chromedriver + 672097\n5   chromedriver                        0x0000000107c03872 chromedriver + 841842\n6   chromedriver                        0x0000000107bd5db8 chromedriver + 654776\n7   chromedriver                        0x0000000107c03a2e chromedriver + 842286\n8   chromedriver                        0x0000000107c2268f chromedriver + 968335\n9   chromedriver                        0x0000000107c03613 chromedriver + 841235\n10  chromedriver                        0x0000000107bd43da chromedriver + 648154\n11  chromedriver                        0x0000000107bd4d1e chromedriver + 650526\n12  chromedriver                        0x0000000107f5fa70 chromedriver + 4364912\n13  chromedriver                        0x0000000107f64e36 chromedriver + 4386358\n14  chromedriver                        0x0000000107f446de chromedriver + 4253406\n15  chromedriver                        0x0000000107f65b79 chromedriver + 4389753\n16  chromedriver                        0x0000000107f36a29 chromedriver + 4196905\n17  chromedriver                        0x0000000107f85b28 chromedriver + 4520744\n18  chromedriver                        0x0000000107f85d07 chromedriver + 4521223\n19  chromedriver                        0x0000000107f96a93 chromedriver + 4590227\n20  libsystem_pthread.dylib             0x00007ff815dec1d3 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff815de7bd3 thread_start + 15", "trace": "self = <test_load_add_product.TestAddProduct object at 0x1121376d0>, login = <pages.login_page.LoginPage object at 0x1123f67d0>\n\n    @allure.title(\"Add product\")\n    @allure.severity(\"Critical\")\n    @pytest.mark.ui\n    def test_add_product(self, login):\n        self.inventory_page.is_opened()\n        # for _ in range(10):\n        self.add_product_page.open_add_page()\n        self.add_product_page.enter_barcode()\n        time.sleep(3)\n>       self.add_product_page.add_image()\n\ntests/ui_tests/add_product/test_load_add_product.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/add_product_page.py:114: in add_image\n    image_placeholder.send_keys(self.image_path_doll)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:230: in send_keys\n    self._execute(\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:394: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1123f4ee0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...ff815dec1d3 _pthread_start + 125\\\\n21  libsystem_pthread.dylib             0x00007ff815de7bd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=122.0.6261.112)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000107f9f2a8 chromedriver + 4625064\nE       1   chromedriver                        0x0000000107f96e53 chromedriver + 4591187\nE       2   chromedriver                        0x0000000107b95c97 chromedriver + 392343\nE       3   chromedriver                        0x0000000107bdb57f chromedriver + 677247\nE       4   chromedriver                        0x0000000107bda161 chromedriver + 672097\nE       5   chromedriver                        0x0000000107c03872 chromedriver + 841842\nE       6   chromedriver                        0x0000000107bd5db8 chromedriver + 654776\nE       7   chromedriver                        0x0000000107c03a2e chromedriver + 842286\nE       8   chromedriver                        0x0000000107c2268f chromedriver + 968335\nE       9   chromedriver                        0x0000000107c03613 chromedriver + 841235\nE       10  chromedriver                        0x0000000107bd43da chromedriver + 648154\nE       11  chromedriver                        0x0000000107bd4d1e chromedriver + 650526\nE       12  chromedriver                        0x0000000107f5fa70 chromedriver + 4364912\nE       13  chromedriver                        0x0000000107f64e36 chromedriver + 4386358\nE       14  chromedriver                        0x0000000107f446de chromedriver + 4253406\nE       15  chromedriver                        0x0000000107f65b79 chromedriver + 4389753\nE       16  chromedriver                        0x0000000107f36a29 chromedriver + 4196905\nE       17  chromedriver                        0x0000000107f85b28 chromedriver + 4520744\nE       18  chromedriver                        0x0000000107f85d07 chromedriver + 4521223\nE       19  chromedriver                        0x0000000107f96a93 chromedriver + 4590227\nE       20  libsystem_pthread.dylib             0x00007ff815dec1d3 _pthread_start + 125\nE       21  libsystem_pthread.dylib             0x00007ff815de7bd3 thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementNotInteractableException"}, "steps": [{"name": "Page https://tng-ta.web.app/inventory is opened", "status": "passed", "start": 1710327446401, "stop": 1710327446409}, {"name": "Open  add page", "status": "passed", "start": 1710327446409, "stop": 1710327448415}, {"name": "Enter unic barcode", "status": "passed", "start": 1710327448415, "stop": 1710327448567}], "attachments": [{"name": "stdout", "source": "86847b2c-6ebe-4ea2-ba30-37cdde934906-attachment.txt", "type": "text/plain"}], "start": 1710327446401, "stop": 1710327451630, "uuid": "447a351a-7997-4850-ac2c-851063cda328", "historyId": "e987e4754a8e6d674a83bc6c6c9d7a0f", "testCaseId": "e987e4754a8e6d674a83bc6c6c9d7a0f", "fullName": "tests.ui_tests.add_product.test_load_add_product.TestAddProduct#test_add_product", "labels": [{"name": "severity", "value": "Critical"}, {"name": "feature", "value": "Sanity testing"}, {"name": "tag", "value": "ui"}, {"name": "parentSuite", "value": "tests.ui_tests.add_product"}, {"name": "suite", "value": "test_load_add_product"}, {"name": "subSuite", "value": "TestAddProduct"}, {"name": "host", "value": "Olegs-MBP-2"}, {"name": "thread", "value": "71590-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.ui_tests.add_product.test_load_add_product"}]}